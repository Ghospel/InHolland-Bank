/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Customer;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-06-27T18:08:08.076Z[GMT]")
@Api(value = "customer", description = "the customer API")
public interface CustomerApi {

    @ApiOperation(value = "Get all the customers", nickname = "customerGet", notes = "", response = Customer.class, authorizations = {
        @Authorization(value = "password", scopes = {
            @AuthorizationScope(scope = "", description = "")            })    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Customer.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Not found"),
        @ApiResponse(code = 498, message = "Token expired"),
        @ApiResponse(code = 499, message = "Token required"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/customer",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Customer>> customerGet();


    @ApiOperation(value = "Delete the customer", nickname = "customerIdDelete", notes = "", authorizations = {
        @Authorization(value = "password", scopes = {
            @AuthorizationScope(scope = "", description = "")            })    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Not found"),
        @ApiResponse(code = 498, message = "Token expired"),
        @ApiResponse(code = 499, message = "Token required"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/customer/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> customerIdDelete(@ApiParam(value = "",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Get the customer", nickname = "customerIdGet", notes = "", response = Customer.class, authorizations = {
        @Authorization(value = "password", scopes = {
            @AuthorizationScope(scope = "", description = "")            })    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Customer.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Not found"),
        @ApiResponse(code = 498, message = "Token expired"),
        @ApiResponse(code = 499, message = "Token required"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/customer/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Customer> customerIdGet(@ApiParam(value = "",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Create a new customer", nickname = "customerPost", notes = "", response = Customer.class, authorizations = {
        @Authorization(value = "password", scopes = {
            @AuthorizationScope(scope = "", description = "")            })    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Customer.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Not found"),
        @ApiResponse(code = 498, message = "Token expired"),
        @ApiResponse(code = 499, message = "Token required"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/customer",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Customer> customerPost(@RequestBody Customer customer);

}
